# -*- coding: utf-8 -*-
"""projetoPOC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pik7b5tKgJLgOsHcin8bRAoPGKJNwRSs
"""



"""# Projeto: Prever Insuficiência Cardíaca baseado em fatores clínicos e comportamentais

A Insuficiência Cardíaca (causada por doenças cardiovasculares) é a principal
causa de morte de vidas todos os anos, representando um percentual de 31% de todas as mortes mundiais. Este conjunto de dados contém doze características divididas em fatores clínicos e comportamentais como, por exemplo, nível de plaquetas e sódio sérico no sangue, fumante ou não, hipertenso ou não e pode ser utilizado para prever a mortalidade por doenças cardiovasculares. Objetivo do trabalho é realizar uma análise exploratória sobre o conjunto de dados e descobrir uma série de insights para auxiliar a equipe médica para a tomada de ações preventivas.
"""

# Commented out IPython magic to ensure Python compatibility.
# 1 - Instale o pacote 'squarify' caso não possua
!pip install squarify

# 2 - Importação de pacotes e bibliotecas necessárias
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import squarify 
import urllib
import requests 

# %matplotlib inline

link = 'https://drive.google.com/file/d/1oy5u3iRWmqiBMzZHCokre-W9iJDHpD1n/view?usp=sharing'

# Download arquivo dataset
def baixar_arquivo(url):
    resposta = requests.get(url, stream=True) #AQUI
    if resposta.status_code == requests.codes.OK:
        print("Download finalizado. Arquivo salvo em: {}")
    else:
        resposta.raise_for_status()
baixar_arquivo(link)

# 2 - Importando os dados para o dataset

dadosClinicos = pd.read_csv('heart_failure_clinical_records_dataset.csv')

# Visualizando os primeiros registros e tipos de dados
dadosClinicos.head()

print(type(dadosClinicos))

dadosClinicos.dtypes

dadosClinicos

# Ajustando os tipos de dados, renomeando colunas.

dadosClinicos.age = dadosClinicos.age.astype(int)

dadosClinicos.anaemia = dadosClinicos.anaemia.astype(bool)

dadosClinicos.diabetes = dadosClinicos.diabetes.astype(bool)

dadosClinicos.high_blood_pressure = dadosClinicos.high_blood_pressure.astype(bool)

dadosClinicos['sex'] = dadosClinicos['sex'].replace(0, 'F')

dadosClinicos['sex'] = dadosClinicos['sex'].replace(1, 'M')

dadosClinicos.sex = dadosClinicos.sex.astype(str)

type(dadosClinicos.sex)

dadosClinicos.smoking = dadosClinicos.smoking.astype(bool)

# paciente falheceu ou não durante o evento
dadosClinicos.DEATH_EVENT = dadosClinicos.DEATH_EVENT.astype(bool)

dadosClinicos = dadosClinicos.rename(columns = {'DEATH_EVENT':'dieOrNot'}, inplace = False)

dadosClinicos.columns

# Verificação de valores Null (para a modelagem preditiva)
dadosClinicos.isnull().values.any()

# 3 - Análise Exploratória
# Informações estatísticas gerais
# Para variáveis quantitativas (numéricas)
dadosClinicos.describe()

# Número de linhas, colunas, tipo de cada dado
dadosClinicos.info()

# Análise unilateral. Varíavel: age (quantitativa). Possível será CATEGÓRICA.
# Resumo estatístico básico
dadosClinicos.age.describe()

plt.boxplot(dadosClinicos.age)
plt.title('Boxplot de idades')

plt.hist(dadosClinicos.age)
plt.xlabel('Idades')
plt.ylabel('Frequência')
plt.title('Histograma de idades')

# Exploração da varíavel categórica anaemia
# Resumo estástico básico
dadosClinicos.anaemia.describe()

# Contagem de valores
dadosClinicos.anaemia.value_counts()

labelsNomesAnemia = "Não tem anemia","Tem anemia"
plt.pie(dadosClinicos.anaemia.value_counts(),labels = labelsNomesAnemia, autopct='%1.1f%%', shadow = True)
plt.title('Porcentagem de pacientes com anemia')

plt.bar(labelsNomesAnemia,dadosClinicos.anaemia.value_counts())
plt.ylabel('Quantidade')
plt.title('Quantidade de pacientes com e sem anemia')

# Exploração da varíavel creatinine_phosphokinase
# Resumo estástico básico
dadosClinicos.creatinine_phosphokinase.describe()

plt.boxplot(dadosClinicos.creatinine_phosphokinase)
plt.title('Boxplot de creatinine_phosphokinase')
# Note que há bastante outliers, necessário ajustar para o modelo preditivo

plt.hist(dadosClinicos.creatinine_phosphokinase,bins = 3)
plt.xlabel("Creatinine_phosphokinase")
plt.ylabel("Frequência")
plt.title("Histograma de creatinine_phosphokinase (CPK) no sangue")

# Exploração da variável diabetes (categórica)
# Contagem de valores
dadosClinicos.diabetes.value_counts()

labelsNomesDiabetes = "Não tem diabete","Tem diabete "
plt.pie(dadosClinicos.diabetes.value_counts(),labels = labelsNomesDiabetes, autopct='%1.1f%%', shadow = True)
plt.title('Porcentagem de pacientes com diabetes')

plt.bar(labelsNomesDiabetes,dadosClinicos.diabetes.value_counts())
plt.ylabel('Quantidade')
plt.title('Quantidade de pacientes sem e com diabete')

# Exploração da varíavel ejection_fraction
# Resumo estástico rápido
dadosClinicos.ejection_fraction.describe()

plt.boxplot(dadosClinicos.ejection_fraction)
plt.title('Boxplot de ejection_fraction')

plt.hist(dadosClinicos.ejection_fraction)
plt.xlabel("ejection_fraction")
plt.ylabel("Frequência")
plt.title("Histograma de 'ejection_fraction'")

# Exploração da variável 'high_blood_pressure' (categórica)

# Contagem de valores
dadosClinicos.high_blood_pressure.value_counts()

labelsNomesPressaoAlta = "Não tem pressão alta","Tem pressão alta "
plt.pie(dadosClinicos.high_blood_pressure.value_counts(),labels = labelsNomesPressaoAlta, autopct='%1.1f%%', shadow = True)
plt.title('Porcentagem de pacientes com pressão alta')

# Quantidade
plt.bar(labelsNomesPressaoAlta,dadosClinicos.high_blood_pressure.value_counts())
plt.ylabel('Quantidade')
plt.title('Quantidade de pacientes sem e com pressão alta')
# plt.hist(dadosClinicos.ejection_fraction, bins = 2) # não agrega muito

# Exploração da varíavel platelets (quantitativa)
# Resumo estátistico breve
dadosClinicos.platelets.describe()

plt.boxplot(dadosClinicos.platelets)
plt.title('Boxplot Plaquetas (mg/mL) no sangue')
# Note que há bastante outliers

plt.hist(dadosClinicos.platelets)
plt.title('Histograma Plaquetas (mg/mL) no sangue')
plt.ylabel('Frequência')

# Exploração variável quantitativa 'serum_creatinine' 
# Resumo estástico rápido
dadosClinicos.serum_creatinine.describe()

plt.boxplot(dadosClinicos.serum_creatinine)
plt.title('Boxplot - Nível de creatinina sérica no sangue (mg / dL)')
# Há bastante valores outliers

plt.hist(dadosClinicos.serum_creatinine)
plt.title('Histograma - Nível de creatinina sérica no sangue (mg / dL)')
plt.ylabel('Frequência')

# Exploração da varíavel serum_sodium (quantitativa)
# Resumo estástico rápido
dadosClinicos.serum_sodium.describe()

plt.boxplot(dadosClinicos.serum_sodium)
plt.title('Boxplot - Nível de sódio sérico no sangue (mEq / L)')

plt.hist(dadosClinicos.serum_sodium)
plt.title('Histograma - Nível de sódio sérico no sangue (mEq / L)')
plt.ylabel('Frequência')

# Exploração da varíavel sex (categórica)

# Contagem de valores
dadosClinicos.sex.value_counts()

labelsNomesSexo = "Masculino","Feminino"
plt.pie(dadosClinicos.sex.value_counts(),labels = labelsNomesSexo, autopct='%1.1f%%', shadow = True)
plt.title('Porcentagem de sexo')

# Quantidade
plt.bar(labelsNomesSexo,dadosClinicos.sex.value_counts())
plt.ylabel('Quantidade')
plt.title('Quantidade de sexo de pacientes')

# Exploração da varíavel smoking (categórica)

# Contagem de valores
dadosClinicos.smoking.value_counts()

labelsNomesFumantesOuNao = "Não fuma","Fuma"
plt.pie(dadosClinicos.smoking.value_counts(),labels = labelsNomesFumantesOuNao, autopct='%1.1f%%', shadow = True)
plt.title('Porcentagem de fumantes')

# Quantidade
plt.bar(labelsNomesFumantesOuNao,dadosClinicos.smoking.value_counts())
plt.ylabel('Quantidade')
plt.title('Quantidade de fumantes')

# Exploração da varíavel time representando número de dias (categórica)

# Contagem de valores
dadosClinicos.time.describe()

plt.boxplot(dadosClinicos.time)
plt.title('Boxplot - Período de acompanhamento em dias')

plt.hist(dadosClinicos.time)
plt.title('Período de acompanhamento em dias')
plt.ylabel('Frequência')

dadosClinicos.time

# Exploração varíavel categórica dieOrNot

dadosClinicos.dieOrNot.value_counts()

labelsNomesMorteOuNao = "Não morreu","Morreu"
plt.pie(dadosClinicos.dieOrNot.value_counts(),labels = labelsNomesMorteOuNao, autopct='%1.1f%%', shadow = True)
plt.title('Porcentagem de Mortes')

# Quantidade
plt.bar(labelsNomesMorteOuNao,dadosClinicos.dieOrNot.value_counts())
plt.ylabel('Quantidade')
plt.title('Quantidade de Mortes')

# Análise multivariada (duas ou mais varíaveis). 
# Correlação entre variáveis. 
# Correlação varia entre -1 (correlação negativa: uma diminui, outra aumenta) a 1 (correlação positiva, ambas
# variáveis vão no mesmo sentido). Correlação identifica o relacionamento linear entre variáveis, o que 
# não significa causalidade.
# corr() = a correlação de Pearson
dadosClinicos.corr()

# Gráfico de correlação
plt.figure(figsize=(10, 6))
sns.heatmap(dadosClinicos.corr(),
            annot = True,
            fmt = '.2f',
            cmap='Blues')
plt.title('Correlação entre variáveis do dataset de dadosClinicos')
plt.show()
# As correlação estão fracas, considere que boas seriam em torno de 70% ...

# Análise: idade e nível de creatinine_phosphokinase

# Comprovando a correlação, por exemplo, entre age e creatinine_phosphokinase, que está muito fraca
plt.scatter(dadosClinicos.age,dadosClinicos.creatinine_phosphokinase)
plt.xlabel("Idade")
plt.ylabel("Nível creatinina sérica no sangue (mg / dL)")
plt.title('Relação Idade x Nível de creatinina sérica')

# Análise: idade x nível de ejection_fraction
# Comprovando a correlação, por exemplo, entre age e ejection_fraction, que está muito fraca
plt.scatter(dadosClinicos.age,dadosClinicos.ejection_fraction)
plt.xlabel("Idade")
plt.ylabel("Nível de sódio sérico no sangue (mEq / L)")
plt.title("Nível de sódio sérico no sangue (mEq / L)")

# Análise: idades x plaquetas
# Comprovando a correlação, por exemplo, entre age e plaquetas, que está muito fraca
plt.scatter(dadosClinicos.age,dadosClinicos.platelets)
plt.xlabel("Idade")
plt.ylabel("Plaquetas (mg/mL) no sangue)")
plt.title("Nível Plaquetas (mg/mL) no sangue por idade")

# Análise: idades x serum_creatinine
# Comprovando a correlação, por exemplo, entre age e serum_creatinine, que está muito fraca
plt.scatter(dadosClinicos.age,dadosClinicos.serum_creatinine)
plt.xlabel("Idade")
plt.ylabel("Plaquetas (mg/mL) no sangue)")
plt.title("Nível serum_creatinine'enzima CPK' (mg/mL)  por idade")

# Análise: idades x serum_sodium 
# Comprovando a correlação, por exemplo, entre age e serum_creatinine, que está muito fraca
plt.scatter(dadosClinicos.age,dadosClinicos.serum_sodium)
plt.xlabel("Idade")
plt.ylabel("Porcentagem de Serum_sodium no sangue")
plt.title("Nível serum_sodium por idade")

# Contar quantos tem anaemia categorizando por sexo
anaemia_map = {0: 'Não tem', 1: 'Tem'}
sns.factorplot('anaemia',data = dadosClinicos, kind='count',hue = 'sex').set_xticklabels(anaemia_map.values())
plt.ylabel('Quantidade')
plt.xlabel('Anaemia')
plt.title('Contagem de Pacientes Anémicos por Sexo')

# Contar quantos são diabéticos por sexo 
diabete_map = {0: 'Não tem', 1: 'Tem'}
sns.factorplot('diabetes',data = dadosClinicos, kind='count',hue = 'sex').set_xticklabels(diabete_map.values())
plt.ylabel('Quantidade')
plt.xlabel('Diabetes')
plt.title('Contagem de Pacientes Diabéticos por Sexo')

# Contagem de Pacientes Fumantes por Sexo
fumantes_map = {0: 'Não é fumante', 1: 'É fumante'}
sns.factorplot('smoking',data = dadosClinicos, kind='count',hue = 'sex').set_xticklabels(fumantes_map.values())
plt.ylabel('Quantidade')
plt.xlabel('Fumantes')
plt.title('Contagem de Pacientes Fumantes por Sexo')

# Contar quantos tem pressão alta por sexo
pressaoAltaouNao_map = {0: 'Não tem', 1: 'Tem pressão alta'}
sns.factorplot('high_blood_pressure',data = dadosClinicos, kind='count',hue = 'sex').set_xticklabels(pressaoAltaouNao_map.values())
plt.ylabel('Quantidade')
plt.xlabel('Pressão Alta')
plt.title('Contagem de Pacientes por Pressão Alta por Sexo')

# Contar quantos morreram baseado no sexo
morreramOuNao_map = {0: 'Não faleceu', 1: 'Faleceu'}
sns.factorplot('dieOrNot',data = dadosClinicos, kind='count',hue = 'sex').set_xticklabels(morreramOuNao_map.values())
plt.ylabel('Quantidade')
plt.xlabel('Falecimentos')
plt.title('Contagem de Órbitos por Sexo')

# Tempo médio de acompanhamento em dias por sexo (total)
tempoMediaAcompanhSexo = dadosClinicos.groupby(['sex']).mean()
squarify.plot(sizes=[tempoMediaAcompanhSexo.iloc[0].time,
                     tempoMediaAcompanhSexo.iloc[1].time], label=["Mulheres", "Homens"], 
              color=["red","green"], alpha=.2)
plt.title('Tempo Médio de Acompanhamento de Dias dos Pacientes')
plt.axis('off')
plt.show()
tempoMediaAcompanhSexo.time

# Tempo de acompanhamento em dias por faixa de idade
valorMin = dadosClinicos.age.min()
valorMax = dadosClinicos.age.max()
divParte = (valorMax - valorMin)/3
squarify.plot(sizes=[len(dadosClinicos[dadosClinicos['age'].between(valorMin,valorMin+divParte)]),
                     len(dadosClinicos[dadosClinicos['age'].between(valorMin+divParte,valorMin+(divParte*2))]),
                     len(dadosClinicos[dadosClinicos['age'].between(valorMin+(divParte*2),valorMax)])
                    ], 
              label=["Faixa etária 1 idade: %d a %d" %(valorMin,valorMin+divParte), 
                     "Faixa etária 2 idade: %d a %d" %(valorMin+divParte,valorMin+(divParte*2)),
                     "Faixa etária 3 idade: %d a %d" %(valorMin+(divParte*2),valorMax)], 
              color=["red","green","yellow"], alpha=.3)
plt.title('Tempo Médio de Acompanhamento de Dias dos Pacientes por Faixa Etária')
plt.axis('off')
plt.show()